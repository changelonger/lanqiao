#include <iostream>
using namespace std;
int a[500005];
int main()
{

    // 请在此输入您的代码
    int n; int x = 0; int fp = 0; int n1 = 0; int n2 = 0;
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        x ^= a[i];
    }                       //录入数据，并通过异或和排除其他为偶数的出现次数（两个相同的异或和为零）
    while ((x & (1 << fp)) == 0)
        fp++;              

    /*
    这段代码是一个循环，用于找到一个整数 x 的二进制表示中从右往
    左数第一个为1的位（即最低位的1所在的位置）。让我详细解释一下这段代码的含义，并举一个例子来说明。
    1 << fp：这部分代码表示将数字1左移 fp 位，
    例如，如果 fp 是0，那么结果是1；如果 fp 是1，结果是2；如果 fp 是2，结果是4，以此类推。
    x & (1 << fp)：这部分代码是一个按位与操作，它会将 x 的二进制表示中第 fp 位与1进行按位与操作。
    如果结果为0，说明 x 的第 fp 位是0；
    如果结果不为0，说明 x 的第 fp 位是1。
    while ((x & (1 << fp)) == 0)：这是一个循环条件，
    它的含义是当 x 的第 fp 位是0时，执行循环体内的操作。
    循环体内的操作是将 fp 递增，继续检查下一位。
    */
    //因为两个数相异结果为1，所以找到任意一位为1的数位，将其与原数组一一相比，通过与筛选，同为一就是一，为第一个数，其他为第二个数
    for (int i = 0; i < n; i++) {
        /*
        分为两部分，目的是为了把两个单独的分开；
        */
        if (a[i] & (1 << fp))
            n1 ^= a[i];
        else
            n2 ^= a[i];
    }
    cout << n1 << ' ' << n2;
    return 0;
}